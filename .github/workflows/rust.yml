name: Rust

on:
  push:
    branches: [ "main", "rook" ]
  pull_request:
    branches: [ "main", "rook" ]

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always
  SQLX_OFFLINE: true

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Cargo build
        uses: actions/cache@v4
        with:
          path: rook/target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('rook/Cargo.lock') }}

      - name: Build
        working-directory: rook
        run: cargo build --verbose

  test:
    needs: build
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Cargo build
        uses: actions/cache@v4
        with:
          path: rook/target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('rook/Cargo.lock') }}

      - name: Run tests
        working-directory: rook
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
        run: cargo test --verbose

  # coverage:
  #   needs: test
  #   runs-on: ubuntu-latest

  #   services:
  #     postgres:
  #       image: postgres
  #       env:
  #         POSTGRES_PASSWORD: postgres
  #       ports:
  #         - 5432:5432
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5

  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Cache Cargo registry
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           ~/.cargo/registry
  #           ~/.cargo/git
  #         key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

  #     - name: Cache Cargo build
  #       uses: actions/cache@v4
  #       with:
  #         path: rook/target
  #         key: ${{ runner.os }}-cargo-build-${{ hashFiles('rook/Cargo.lock') }}
      
  #     - name: Cache cargo-tarpaulin binary
  #       id: cache-tarpaulin
  #       uses: actions/cache@v4
  #       with:
  #         path: ~/.cargo/bin/cargo-tarpaulin
  #         key: ${{ runner.os }}-cargo-tarpaulin-${{ hashFiles('**/Cargo.lock') }}

  #     - name: Install cargo-tarpaulin
  #       if: steps.cache-tarpaulin.outputs.cache-hit != 'true'
  #       run: cargo install cargo-tarpaulin
      
  #     - name: Generate coverage report
  #       working-directory: rook
  #       env:
  #         DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
  #       run: cargo tarpaulin --out Lcov --output-dir coverage
      
  #     - name: Upload coverage reports to Codecov
  #       uses: codecov/codecov-action@v5
  #       with:
  #         token: ${{ secrets.CODECOV_TOKEN }}
  #         files: rook/coverage/lcov.info
  #         verbose: true
  #         fail_ci_if_error: false
